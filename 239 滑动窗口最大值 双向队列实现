class Solution {
	public:
		vector<int> maxSlidingWindow(vector<int>& nums, int k)
		{
			vector<int> res;
			if (nums.size() == 0)
				return res;
			deque<int> dq;

			int i;
			for (i = 0; i < k; i++)
			{
				updateDeque(nums, dq, i, k);
			}
			res.push_back(nums[dq.front()]);

			for (i = k; i < nums.size(); i++)
			{
				updateDeque(nums, dq, i, k);
				res.push_back(nums[dq.front()]);
			}
			return res;
		}

		void updateDeque(vector<int>& nums, deque<int> &dq, int i, int k)
		{
			while (!dq.empty() && dq.front() == i - k)
				dq.pop_front();
			while (!dq.empty() && nums[dq.back()] < nums[i])
				dq.pop_back();
			dq.push_back(i);
		}
	};
