class Solution {
	public:
		bool searchMatrix(vector<vector<int>>& matrix, int target) 
		{
			if (matrix.size() == 0 || matrix[0].size() == 0)
				return false;
			int row = matrix.size();
			int cln = matrix[0].size();
			if (target<matrix[0][0] || target>matrix[row-1][cln-1])
				return false;
			//对角线缩小遍历空间至左下和右上矩阵
			int i, j;
			for (i = 0, j = 0; i < row && j < cln; i++, j++)
			{
				if (matrix[i][j] == target)
					return true;

				if (matrix[i][j] > target)
					break;
			}
			//遍历剩余的数组，直到第一个大于target的元素停止
			int start = i;
			for (i = start; i < row; i++)
			{
				for (j = 0; j < start; j++)
				{
					if (matrix[i][j] == target)
						return true;
					if (matrix[i][j]>target)
						break;
				}
			}
			for (j = start; j < cln; j++)
			{
				for (i = 0; i < start; i++)
				{
					if (matrix[i][j] == target)
						return true;
					if (matrix[i][j]>target)
						break;
				}
			}
			return false;
		}
	};
